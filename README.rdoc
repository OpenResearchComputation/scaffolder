= scaffolder

== Synopsis

A simple genome scaffolder API to allow sequence contigs to be merged together to build a draft sequence. The sequence used to construct the draft sequences is specified in human-readable yaml files.  Since the draft genome is specified by the scaffold yaml it is easy to remove or manipulate already sequences. In addition as the scaffold file is easy to edit and is ideal for version control and repeatability.

== Feature List

* Specify a genome scaffold using human-readable and version-able plain text file.
* Ruby API to output the scaffold sequences to file.
* Simple and extensible API to add own custom scaffold regions (See Scaffolder::Region). 

== Installing

Ruby and RubyGems are required to use scaffolder. Scaffolder can be installed at the command line using:

  $ gem install scaffolder

== Quick start

Given a fasta file containing two sequences.

  >seqA
  GCGCGC
  >seqB
  ATATAT

A simple genome scaffold containing the two sequences can be specified in yaml format. The keyword *sequence* means a sequence is used in the first part of the scaffold. The keyword *seqA* identifies that the sequence seqA from the fasta file is used.

  ---
    - sequence:
        source: 'seqA'
    - sequence:
        source: 'seqB'

The scaffolder API can then be used as follows to generate a scaffold sequence from the generated sequences.

  scaffold = Scaffolder.new('scaffold.yml','sequences.fasta')
  sequence = scaffold.inject(String.new) do |build,entry|
    build << entry.sequence
  end
  puts sequence # Prints GCGCGCATATAT

== The Scaffold File

=== Sequence Regions

The above example is simplified to demonstrates basic usage. The following examples give more detail on specifying the genome scaffold. Sequences are specified in the scaffold using the *sequence* keyword.

==== Sub-Sequences

When generating a scaffolder only a subset of a sequence may be required. Inserting sub-sequences into the scaffold can be specified with the *start* and *stop* keywords. All of the sequence before the start coordinate is ignored and all of sequence after the stop coordinate is ignored, meaning only the sequence between the start and stop position inclusively is used in the scaffold.

  ---
    - sequence:
        source: 'sequence1'
        start: 42
        stop: 1764

==== Reverse Complementation

The reverse keyword will specify that sequence is reversed complemented.

  ---
    - sequence:
        source: 'sequence1'
        reverse: true

=== Insert Regions

Sequence contigs may contain gaps where the sequence could not be correctly resolved by the assembler. Additional sequencing may however produce sequences that can be used to fill these gaps. These inserts can be added to a sequence using the *insert* keyword and specifying a yaml array of the inserts. Multiple inserts can be specified.

  ---
    - sequence:
        source: 'sequence1'
        inserts:
          -
            source: "insert1"
            open: 3
            close: 10

==== Insert Position

The location where an insert is added to a sequence is defined by either the open, close parameters, or both. These define the location where the sequence is 'opened' and 'close' to add the insert. If only one parameter is used, for example the open position, then the close position is determined from the length of the insert sequence and vice versa.

==== Insert Sub-Sequence

An insert can be subsequenced in the same way as a sequence using the *start* and *stop* keywords. Similarly the insert sequence can be reverse completed using the *reverse* keyword.

  ---
    - sequence:
        source: 'sequence1'
        inserts:
          -
            source: "insert1"
            open: 3
            close: 10
            start: 8
            stop: 16
            reverse: 16


=== Unresolved Regions

Until a complete genome draft is generated there may be regions in the genome which are unknown. These can be specified in the scaffold   file using the *unresolved* keyword. Unresolved regions are filled with 'N' nucleotide characters equal to the value specified by the length character.

  ---
    - unresolved:
        length: 10

=== Scaffold File Processing Order

Inserts processed are processed in reverse order according to end position. Last insert added up until first insert. Done to preserve insert coordinates.

Overlapping inserts may cause unexpected behaviour

Sequence reversed after inserts have been added.

== Contributors

Scaffolder was developed by Michael Barton. Patches and bug reports are welcome.

== Copyright

Scaffolder Â© 2010 by Michael Barton. YARD is licensed under the MIT license. Please see the LICENSE document for more information.
